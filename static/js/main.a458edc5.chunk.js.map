{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isSorted","setIsSorted","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"uPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,WACtBC,EAAoB,SAqCnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAiB,IAAnD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAkB,GAAlD,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EA/BR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,UAAWE,EACH,EADGA,SAEPI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,cAAcD,GAE7B,KAAKZ,EACH,OAAOW,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,GACFI,EAAcM,UAGTN,EAMcO,CAAiBlB,EACpC,CAAEK,YAAWE,aAWf,OAEE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UACtB,CAAE,WAAYhB,IAAcJ,IAC9BqB,QAAS,WACPhB,EAAaL,IALjB,iCAWA,wBACEmB,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,WAAYhB,IAAcH,IAC9BoB,QAAS,WACPhB,EAAaJ,IALjB,4BAWA,wBACEkB,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,YAAad,IACjBe,QAlCW,WACjBd,GAAaD,IA6BT,qBASA,wBACEa,KAAK,SACLD,UAAWE,IAAG,SAAU,YAAa,WACnC,CAAE,aAAchB,IAClBiB,QAhDU,WAChBhB,EAAa,IACbE,GAAY,IA0CR,sBAUDC,EAAac,KAAI,SAAAC,GAAI,OACpB,6BACE,oBAAI,UAAQ,OAAZ,SAAoBA,KADbA,UClHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a458edc5.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\n\ntype Goods = string[];\n\ntype Props = {\n  sortField: string;\n  isSorted: boolean;\n};\n\nfunction getPreparedGoods(\n  goods: Goods,\n  { sortField, isSorted }: Props,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isSorted) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState<string>('');\n  const [isSorted, setIsSorted] = useState<boolean>(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, isSorted });\n\n  const resetFunc = () => {\n    setSortField('');\n    setIsSorted(false);\n  };\n\n  const toggleSort = () => {\n    setIsSorted(!isSorted);\n  };\n\n  return (\n\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info',\n            { 'is-light': sortField !== SORT_FIELD_ALPHABET })}\n          onClick={() => {\n            setSortField(SORT_FIELD_ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': sortField !== SORT_FIELD_LENGTH })}\n          onClick={() => {\n            setSortField(SORT_FIELD_LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning',\n            { 'is-light': !isSorted })}\n          onClick={toggleSort}\n        >\n          Reverse\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-danger', 'is-light',\n            { 'is-hidden': !sortField })}\n          onClick={resetFunc}\n        >\n          Reset\n        </button>\n      </div>\n\n      {visibleGoods.map(good => (\n        <ul key={good}>\n          <li data-cy=\"Good\">{good}</li>\n        </ul>\n      ))}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}